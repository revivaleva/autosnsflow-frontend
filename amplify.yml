# /amplify.yml
version: 1
frontend:
  phases:
    preBuild:
      commands:
        # [ADD] 早期終了ガード: フロントに関係ない差分なら /tmp/AMPLIFY_SKIP_BUILD を作る
        - nvm install 20 && nvm use 20
        - chmod +x scripts/should-build-frontend.sh || true
        - bash scripts/should-build-frontend.sh
        - node -v
        - npm -v
        - npm config set registry https://registry.npmjs.org
        # npm ci のリトライを追加（ネットワーク不安定時の耐性向上）
        - |
          retry_install() {
            local attempt=0
            while true; do
              if [ -f package-lock.json ]; then
                echo "package-lock.json found -> running npm ci"
                if npm ci --prefer-offline --no-audit --no-progress; then
                  return 0
                fi
              else
                echo "package-lock.json not found -> running npm install"
                if npm install --prefer-offline --no-audit --no-progress; then
                  return 0
                fi
              fi
              attempt=$((attempt+1))
              if [ $attempt -ge 3 ]; then
                echo "install failed after 3 attempts"; return 1
              fi
              echo "install failed, retrying... ($attempt/3)"
              sleep 2
            done
          }
          retry_install
        - npm --prefix packages/shared run build || true
        - npm --prefix packages/backend-core run build || true
        # 環境変数を明示的に .env.production に書き出す（必要なものだけ）[KEEP]
        - echo "AUTOSNSFLOW_ACCESS_KEY_ID=$AUTOSNSFLOW_ACCESS_KEY_ID" >> .env.production
        - echo "AUTOSNSFLOW_SECRET_ACCESS_KEY=$AUTOSNSFLOW_SECRET_ACCESS_KEY" >> .env.production
        - echo "NEXT_PUBLIC_AWS_REGION=$NEXT_PUBLIC_AWS_REGION" >> .env.production
        - echo "MASTER_DISCORD_WEBHOOK=$MASTER_DISCORD_WEBHOOK" >> .env.production
    build:
      commands:
        # [MODIFY] 常にビルドを実行（required-server-files.json生成のため）
        - |
          if [ -f /tmp/AMPLIFY_SKIP_BUILD ]; then
            echo "No frontend changes detected, but running build for Next.js requirements...";
          else
            echo "Frontend changes detected. Running full build...";
          fi
        # Write necessary server env vars into .env.production so Next.js SSR/API can access them via process.env
        - |
          printf "THREADS_OAUTH_REDIRECT_PROD=%s\n" "$THREADS_OAUTH_REDIRECT_PROD" >> .env.production
          printf "THREADS_OAUTH_REDIRECT_LOCAL=%s\n" "$THREADS_OAUTH_REDIRECT_LOCAL" >> .env.production
          printf "THREADS_CLIENT_ID=%s\n" "$THREADS_CLIENT_ID" >> .env.production
          printf "THREADS_CLIENT_SECRET=%s\n" "$THREADS_CLIENT_SECRET" >> .env.production
          printf "TBL_THREADS_ACCOUNTS=%s\n" "$TBL_THREADS_ACCOUNTS" >> .env.production
          printf "TBL_SETTINGS=%s\n" "$TBL_SETTINGS" >> .env.production
          printf "MASTER_DISCORD_WEBHOOK=%s\n" "$MASTER_DISCORD_WEBHOOK" >> .env.production
        - NEXT_TELEMETRY_DISABLED=1 npm run build
  artifacts:
    baseDirectory: .next
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*
      - .next/cache/**/*      # [ADD] Nextのビルドキャッシュを保持（効果大）
      - ~/.npm/**/*           # [ADD] npmのDLキャッシュを保持（2回目以降が速い）
