---
description:
あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：

<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください。なお、すべての提案と実装は、記載された技術スタックの制約内で行ってください：

1. 指示の分析と計画
<タスク分析>
- 主要なタスクを簡潔に要約してください。
- 記載された技術スタックを確認し、その制約内での実装方法を検討してください。
- 重要な要件と制約を特定してください。
- 潜在的な課題をリストアップしてください。
- タスク実行のための具体的なステップを詳細に列挙してください。
- それらのステップの最適な実行順序を決定してください。
- 必要となる可能性のあるツールやリソースを考慮してください。

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
この指示を確認した場合、「作業を行う前にruleを確認しました」と出力してから作業を開始してください。
</タスク分析>

2. タスクの実行
- 特定したステップを一つずつ実行してください。
- 各ステップの完了後、簡潔に進捗を報告してください。
- 実行中に問題や疑問が生じた場合は、即座に報告し、対応策を提案してください。

3. 品質管理
- 各タスクの実行結果を迅速に検証してください。
- エラーや不整合を発見した場合は、直ちに修正アクションを実施してください。
- コマンドを実行する場合は、必ず標準出力を確認し、結果を報告してください。

4. 最終確認
- すべてのタスクが完了したら、成果物全体を評価してください。
- 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。

重要な注意事項：
- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。

---

## ブランチ運用（必読）

- **main**：本番。ここへは「明示指示があった時のみ」マージ。直接 push 禁止。  
- **staging**：通常の開発・修正・デバッグはここへ。特段の指示が無い場合は staging。  
- **lambda**：定期実行（`scheduled` / `auto-post` / `lambda/scheduled-autosnsflow`）関連は必ずここへ push。push で自動ビルド/デプロイが走る。  

共通部分（`src/lib/` 配下）は **staging → main → lambda の順に反映**。  
定期実行専用処理（`lambda/` 配下）は **lambda ブランチ直 push も可**。ただし共通部分を修正する場合は必ず staging を経由する。  

---

## デザイン指針

- Tailwind CSS のみで構成。ライト/ダーク両対応、将来のモバイル（レスポンシブ）前提。  
- ローダー/モーダル等の共通部品を統一し、画面間の一貫性を確保。  

---

## 変更時の原則

- どのブランチに上げるかを必ず明示。不明点は修正せず確認。  
- 既存ロジックを大きく変える提案は一度確認（互換影響の洗い出しを含む）。  
- 共通部品の変更は呼び出し元全体の動作確認をセット。  

---

## 定期実行（Lambda）ポリシー

- 対象語：`定期実行` / `自動投稿` / `scheduled` / `auto-post` / `lambda/scheduled-autosnsflow` を含む変更は Lambda 関連とみなす。  
- lambda ブランチにコミット/PR。コミットメッセージ・PR タイトルに `lambda:` を付与。  
- デプロイ前にローカル or ステージングで確認。main 反映は事前了承があるときのみ。  

---

## シークレット取り扱い

- APIキー/トークン/個人情報のコミット禁止。`.env.*` は `.gitignore`。  
- デプロイ時は GitHub Secrets / AWS Secrets Manager を使用。  
- CI に `git-secrets` / `truffleHog` を導入し、検出時はブロック。  
- 漏洩時は即ローテート＋履歴除去（`git filter-repo` 等）＋報告。  

---

## コマンド実行ポリシー

必須環境：**Windows PowerShell** を基本とする。  
原則：1 ステップ = 1 コマンド。ワンライナー連結（`&&`）禁止。  

### 1) 守護ランナーの使用
- `cx_run <job> <timeoutSec> "<cmd>"` で実行し、タイムアウト・ログ保存・未尾200行のみ表示を徹底。  
- 止まった時は `cx_stop <job>` を提示して強制停止できる形にする。  
- ログは `/tmp/cursor_guard/<job>_YYYYMMDD_HHMMSS.log`。  

### 2) Git 操作は非対話＋タイムアウト
- UNC パスを用い、必ず `-C` でリポジトリパスを明示する。  
- 例:  
  ```powershell
  git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" status
commit は必ず -m 指定。必要時のみ --no-verify。

操作前後で git status --porcelain を実行して確認。

認証は SSH 鍵前提。プロンプト待ち禁止。

3) 出力・ログの扱い
長い出力は必ずファイルへ（> /tmp/*.json / /tmp/*.log）。

JSON 確認は jq。画面は要点のみ表示。

4) 長い/複雑な処理
長文コマンドや here-doc は /tmp/*.sh に保存して実行。

各ステップで結果を確認してから次へ進む。

5) 例（ワンライナー禁止 → 分割推奨）
NG:

sh
コードをコピーする
git rm -r --cached A B && git commit -m "chore" && git push origin lambda
OK:

powershell
コードをコピーする
git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" rm -r --cached A B
git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" status --porcelain
git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" commit -m "chore: remove test artifacts" --no-verify
git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" push --porcelain --no-verify origin lambda
ビルド
powershell
コードをコピーする
cx_run build 1800 "npm ci"
cx_run build 1800 "npm run build"
cx_run lsout 30  "ls -lh .next | tail -n 50"
事故復旧
実行が進まない場合
cx_stop <job>

powershell
コードをコピーする
Get-ChildItem -Recurse .git\*.lock | Remove-Item -Force
git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" status --porcelain
端末不調時
Clear-Host でターミナルリセット

必要に応じて PowerShell 再起動

ビルド/マージ注意（CI 向け短縮版）
マージ競合マーカー（<<<<<<< / ======= / >>>>>>>）を残したまま push すると CI が失敗。必ず解消して確認。

解消後は明示的に git add → commit する（自動 commit 禁止）。

ローカルで npm run build または tsc を実行し構文・型チェックを通す。

push は原則 --force 禁止。必要なら --force-with-lease を使用。

DynamoDB の AttributeValue を直接返さない。必ず正規化。

ワークツリー全体をステージする操作 (git add -A) の注意
git add -A は未追跡ファイルも含めるため、個人環境ファイルや長いファイル名の混入リスクがある。

安全な手順:

git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" status --porcelain

不要ファイルは .gitignore へ追加

必要ファイルのみ git add <path> または git add -p

Windows 側で長いパスエラーが出る場合は .gitignore に追加するか、core.longpaths を有効化

powershell
コードをコピーする
git config --system core.longpaths true
追記: PowerShell 環境での Git 操作について
本プロジェクトは Windows + WSL の併用環境。PowerShell 側から UNC パスで WSL 内を指定する。

例:

powershell
コードをコピーする
git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" <command>
ステップ実行を徹底。&& 禁止。長い出力はログへ保存して確認。

推奨ワークフロー（commit → staging push）
git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" add <files...>

git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" commit -m "<msg>"

git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" checkout staging（なければ checkout -b staging）

git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" merge --no-edit main

git -C "\\wsl.localhost\Ubuntu\home\revival\projects\AutoSNSFlow\frontend" push origin staging