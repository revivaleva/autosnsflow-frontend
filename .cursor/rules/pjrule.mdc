---
description:
あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：

<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください。なお、すべての提案と実装は、記載された技術スタックの制約内で行ってください：

1. 指示の分析と計画
<タスク分析>
- 主要なタスクを簡潔に要約してください。
- 記載された技術スタックを確認し、その制約内での実装方法を検討してください。
- 重要な要件と制約を特定してください。
- 潜在的な課題をリストアップしてください。
- タスク実行のための具体的なステップを詳細に列挙してください。
- それらのステップの最適な実行順序を決定してください。
- 必要となる可能性のあるツールやリソースを考慮してください。

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
この指示を確認した場合、「作業を行う前にruleを確認しました」と出力してから作業を開始してください。
</タスク分析>

2. タスクの実行
- 特定したステップを一つずつ実行してください。
- 各ステップの完了後、簡潔に進捗を報告してください。
- 実行中に問題や疑問が生じた場合は、即座に報告し、対応策を提案してください。

3. 品質管理
- 各タスクの実行結果を迅速に検証してください。
- エラーや不整合を発見した場合は、直ちに修正アクションを実施してください。
- コマンドを実行する場合は、必ず標準出力を確認し、結果を報告してください。

4. 最終確認
- すべてのタスクが完了したら、成果物全体を評価してください。
- 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。

重要な注意事項：
- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。

ブランチ運用（必読）

main：本番。ここへは「明示指示があった時のみ」マージ。直接 push 禁止。

staging：通常の開発・修正・デバッグはここへ。特段の指示が無い場合は staging。

lambda：定期実行（scheduled / auto-post / lambda/scheduled-autosnsflow）関連は必ずここへ push。push で自動ビルド/デプロイが走る。

デザイン指針

Tailwind CSS のみで構成。ライト/ダーク両対応、将来のモバイル（レスポンシブ）前提。

ローダー/モーダル等の共通部品を統一し、画面間の一貫性を確保。

変更時の原則

どのブランチに上げるかを必ず明示。不明点は修正せず確認。

既存ロジックを大きく変える提案は一度確認（互換影響の洗い出しを含む）。

共通部品の変更は呼び出し元全体の動作確認をセット。

定期実行（Lambda）ポリシー

対象語：定期実行/自動投稿/scheduled/auto-post/lambda/scheduled-autosnsflow を含む変更はLambda関連とみなす。

lambda ブランチにコミット/PR。コミットメッセージ・PR タイトルに lambda: を付与。

デプロイ前にローカル or ステージングで確認。main 反映は事前了承があるときのみ。

シークレット取り扱い

APIキー/トークン/個人情報のコミット禁止。.env.* は .gitignore。

デプロイ時は GitHub Secrets / AWS Secrets Manager を使用。

CI に git-secrets / truffleHog を導入し、検出時はブロック。

漏洩時は即ローテート＋履歴除去（git filter-repo 等）＋報告。

コマンド実行ポリシー（ここからが実行制御ルール）

必須環境：WSL(Ubuntu) の bash で実行。Windows PowerShell 直叩き禁止。
原則：1 ステップ = 1 コマンド。ワンライナー連結（&& で多段）禁止。

1) 守護ランナーの使用（Cursor は必ずこれで実行）

cx_run <job> <timeoutSec> "<cmd>" で実行し、タイムアウト・ログ保存・末尾200行のみ表示を徹底。

止まった時は cx_stop <job> を提示して強制停止できる形にする。

ログは /tmp/cursor_guard/<job>_YYYYMMDD_HHMMSS.log。

もし cx_run/cx_stop が未導入なら、最初に導入手順を提示してから作業を進めること。

（参考：導入スニペットは分割して提示すること）

~/.bashrc に関数を追記する旨を告知

追記用コマンドを短い2〜3手順に分けて提示（長大 here-doc 禁止）

source ~/.bashrc を実行

2) Git 操作は非対話＋タイムアウト

Git コマンドは git_to <timeoutSec> <subcommand…> を使用（非対話・pager無効・ログ保存）。

commit は 必ず -m 指定。必要時のみ --no-verify を明示。

壊しやすい操作の前後で git status --porcelain を別ステップで実行して確認。

認証は SSH 鍵前提（BatchMode=yes）。プロンプト待ち禁止。

3) 出力・ログの扱い

長い出力は必ずファイルへ（> /tmp/*.json / /tmp/*.log）。画面は head -n 100 / tail -n 200 の要点のみ。

JSON の確認は jq -C .（色）＋ less -R か、ログファイル参照で行う。

CloudWatch/DynamoDB などの取得は --limit と期間指定を必須にし、無制限取得を禁止。

4) 長い/複雑な処理

長文コマンドや多段 here-doc はスクリプト化して /tmp/*.sh に保存→実行。

逐次確認が必要な場合は cx_run で短いステップに分割し、各段で結果を確認してから次へ。

コマンドは原則 cx2 / run2 / git2 を使う。長時間が必要な場合のみ秒数を明示

5) 例（ワンライナー禁止 → 分割版）

NG

git rm -r --cached A B && git commit -m "chore" && git push origin lambda


OK

git_to 60 rm -r --cached A B || true
git_to 20 status --porcelain
git_to 60 commit -m "chore: remove test artifacts" --no-verify
git_to 120 push --porcelain --no-verify origin lambda


ビルド

cx_run build 1800 "npm ci"
cx_run build 1800 "npm run build"
cx_run lsout 30  "ls -lh .next | tail -n 50"

CLI 出力・ログ取得の詳細

出力は一時ファイルに保存→整形→要点だけ表示。

less 等ページャは基本使わず、ログ参照を案内。

CloudWatch 例：
cx_run logs 60 "aws logs filter-log-events --log-group-name '/aws/lambda/<name>' --start-time <epoch-ms> --end-time <epoch-ms> --limit 100 > /tmp/logs.json"

ローカルデバッグ専用変更

node_modules 直接編集・生成物・一時ログのコミット禁止。必要なら patch-package を利用し patches/ に置く。

デバッグコミットは debug:/wip:。最終 PR 前に整理（squash/rebase）。

CI で node_modules/ や *.log などの混入チェックを実施。

事故復旧（提示テンプレ）

実行が進まない場合：

cx_stop <job>

リポジトリ直下で find .git -name '*.lock' -print -delete

git_to 20 status --porcelain で健全性確認

端末不調時：stty sane → ターミナル再起動。WSL 再起動は wsl.exe --shutdown。

遵守事項（実行時に必ず守る）

WSL で実行し、cx_run / git_to 以外での多段ワンライナー提案は禁止。

すべての重い処理はタイムアウトとログ保存を前提に提示。

ログの保存先パスを毎回明示し、フルログ貼り付けはしない。

ブランチ規約・シークレット規約を破る提案は行わない。
globs:
alwaysApply: true

- ビルド/マージ注意（CI 向け短縮版）
  - マージ競合マーカー（`<<<<<<<` / `=======` / `>>>>>>>`）がソースに残ったままコミットまたはプッシュされると、CI が即座に失敗します。マージ後は必ず以下を実施してください:
    1. 競合を解消し、ファイル内にマーカーが残っていないことを確認する（エディタの検索で `<<<<<<<` を検索）。
    2. 解消後に `git add <file>` を行い、明示的なコミットメッセージでコミットする（自動コミットは不可）。
    3. ローカルで `npm run build` または `tsc` を実行して構文・型エラーがないことを検証する。
    4. staging へ push する際は原則 `--force` を避け、どうしても必要な場合は `--force-with-lease` を使用すること。
  - DynamoDB の AttributeValue (例: `{ S: '...' }`) が API の JSON に混入すると型エラーや実行時エラーになります。API 実装ではレスポンスに含める前に必ず正規化（文字列化）してください。

---