---
alwaysApply: true
---

このプロジェクトは3つのブランチで管理しています
mainブランチ:本番環境です
　修正などをいきなりここに上げることは基本ありません
　mainにマージしてと指示があった時にのみマージするようにしてください
stagingブランチ：開発、テスト用のブランチです
　基本的に新しい機能の追加や修正、デバッグなどはこのブランチで行います
　特に上げるブランチの指示が無い場合や定期実行の処理以外はここに上げてください
lambdaブランチ：定期実行用のブランチです
　定期実行に関する祖0巣を変更した状態でここにpushすると自動でビルド、デプロイが走ります
　バージョン管理で本番運用の定期実行の処理は管理されているため定期実行周りの修正がある場合は確認なしで子のブランチにpushしてください

デザインについて
基本的にTailwind CSSのみで構成してください
chromeのライトモードとダークモードで使用する前提なので両方のデザインを意識してください
いずれスマホから見ることもある為レスポンシブ対応も視野に入れています
画面間で統一感を出すためロード画面やモーダルデザインなどよく使われる部品は共通化してください

修正について
ソースを修正する場合は上記の3つのブランチのどこにpushするかをしっかり判断してください
不明点や確認事項がある場合はそのまま修正せず確認してください
また大きく使用が変わったりこれまで使用していたロジックが不要になるような修正は間違っている可能性が高いので一度確認するようにして下さい
フロント側と定期実行側で共通の部品を使っている部分が多数ある為似た処理を行っている処理が無いか確認し同じ関数をできるだけ使用するようにしてください
共通部品を変更する場合は呼び出しているほかの部分でも正しく動くかをきちんと確認してくださいこのプロジェクトは3つのブランチで管理しています

定期実行（Lambda）ポリシー
定義: 「定期実行」「自動投稿」「scheduled」「auto-post」「lambda/scheduled-autosnsflow」など、予約投稿・定期処理に関わる変更は全て「定期実行（Lambda）関連の変更」とみなします。
ブランチ運用: 定期実行に関するソース変更は必ず lambda ブランチにコミットして push してください。main への直接 push は行わないでください。
コミット/PR ルール: 定期実行の変更はコミットメッセージに lambda: のプレフィックスを付け、PR を作る場合はタイトルに lambda: を含めてください。
デプロイ手順: lambda ブランチへ push すると CI が自動ビルド/デプロイする場合があるため、デプロイ前に必ずローカルまたはステージングで動作確認を行ってください。main へ上げるのは、明示的に本番定義を更新するときのみ許可します（事前了承必須）。
ログ／トラブル時の対応: 定期実行に関するバグ修正は lambda ブランチで行い、修正後はデプロイログを確認して問題が解消したことを報告してください。
（運用補助）
変更の判別が曖昧な場合は scripts/rules.js の decideBranch を参照し、lambda を優先してください。

コマンド実行ポリシー
必ず WSL の bash（Ubuntu 等）で AWS CLI や here-doc を用いた一括実行コマンドを実行すること。 Windows PowerShell は quoting や改行の扱いが異なり、here-doc 終了が正しく伝播しない、制御文字や絵文字で出力が壊れる、PSReadLine が描画エラーで停止するなどの問題が生じやすい。
AWS CLI に渡す JSON は直接コマンドラインで埋め込まず、必ず一時ファイル経由（file:///tmp/xxx.json）で渡すこと。 これにより引用ミスや変数展開ミスを大幅に減らせる。
長い複合コマンドは一行で流すのではなく、短いステップ（1処理＝1コマンド）に分けて実行・確認すること。 各ステップで生成される /tmp/*.json を確認してから次のステップに進む。
長文の単一コマンド（特に here-doc を複数含む一行コマンドや非常に長いパイプライン）は、端末やラッパー経由で途中で切れて実行エラーになることがあるため使用禁止とします。必ずスクリプトファイルに分割して保存し（例: `/tmp/*.sh`）、実行するか、複数の短いコマンドに分割して順に実行してください。
JSON の整形・確認は jq（推奨）または python3 -m json.tool を使い、端末内で直接生の出力を目視しないこと。 （Windows ターミナルでの文字化け対策のため）
出力を外部で持ち運ぶ／共有する場合は base64 エンコードして転送し、受け手側でデコードして解析すること。 これで絵文字や非UTF8文字での破壊を防げる。
対話的に止まってしまった場合の復旧手順を明示すること：Ctrl+C で中断、もしくは here-doc の場合は EOF 行を先頭行にして手で入力して終了させる。
運用スクリプトを用意すること（例: scripts/run-dynamodb-query.sh） — 安全な quoting と一時ファイル生成、ログ出力、base64 変換まで行う簡易ラッパーを用意して全員がそれを使うようにする。
PowerShell を使わざるを得ない場合は必ず WSL の bash を呼び出す（bash -lc '...commands...'）か、スクリプトを WSL 側で実行すること。PowerShell 内で here-doc を複合的に組む運用は禁止とする。

開発時の「ローカルデバッグ専用変更」の取り扱いルール
目的：開発中に行うローカル向けの一時的変更（例：node_modules の直接パッチ、詳細デバッグログ、生成ファイル、.pid 等）が誤ってリモートへ反映され、本番や定期処理を壊すことを防ぐ。
対象（厳禁で扱うもの）：
node_modules/ 以下の直接編集
dev.log, *.pid, scheduled_posts_debug.txt 等の実行生成ファイル
一時的に追加した console.debug／デバッグ用コード（長期的に不要なログ）
手順（必ず守ること）：
ローカルでのみ必要なパッチは node_modules を直接変更せず、どうしても必要なときは patch-package を使用して patches/ に差分を置き、PR に「temporary debug patch」目的と期限（例：YYYY-MM-DD）を明記する。本番反映はチーム合意の元でのみ行う。
ブランチ運用：通常の開発・修正は staging ブランチへ、定期実行（Lambda）関連は必ず lambda ブランチへ、main は本番反映のみ。ルールに従わない直接 main への push は禁止。
コミット／PR の注意：デバッグ用コミットは debug: または wip: プレフィックスを使い、最終 PR では必ず整理（squash/rebase）して不要なデバッグコミットを含めない。PR の説明に「この PR にデバッグ用変更は含まれていない」旨を明記する。
コードレビュー：レビューワは node_modules 編集・生成ファイル・デバッグログの混入がないか必ず確認する。
CI/チェック（推奨）：
PR 時に以下の簡易チェックを実行し、失敗したら差し戻す（例：GitHub Actions / CI）
git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.sha }} | egrep \"^node_modules/|\\.log$|\\.pid$|^dev\\.log$|^package-lock\\.json$\" が空であること
pre-commit フックで生成ファイルや node_modules をコミット対象から阻止する（例：lint-staged / husky）。
違反時の対応：
即時リバート（git revert）またはリモートでの該当ファイル除外の PR を作成する。原因の調査と再発防止措置（CI 追加等）を行う。
補足：
ローカルでの一時的検証は自由。ただし、そのまま push しないことを厳守する。必要な修正はソース側で恒久的な形に直してから PR に含める。

## CLI 出力とログ取得のルール
- **出力は必ず一時ファイルに保存してから確認**: 長い出力は `> /tmp/*.json` に保存し、`jq` や `head -n` で確認する。
- **ページャーや対話的表示を避ける**: `less` 等を使って画面を経由すると中断の原因になるため、`| cat` を使うか出力をファイルに保存してから確認する。
- **クエリはフィルタと上限を必ず指定する**: CloudWatch の `filter-log-events` や DynamoDB のクエリは `--limit` や `--start-time/--end-time` を併用して結果サイズを抑える。
- **出力行数を制限して安全に確認する**: 生ログをそのまま出力せず、`head -n 200` や `jq . | head -n 200` のように先頭のみ確認する。
- **長い複合コマンドはスクリプト化する**: 複数のコマンドを一度に実行する際は `/tmp/*.sh` に分割して保存し、実行ログもファイルに残す。
- **エラーファイルは必ず確認する**: コマンドの標準エラーは `/tmp/*.err` にリダイレクトして確認する運用にする。
- **CloudWatch 検索の推奨例**: `aws logs filter-log-events --log-group-name "/aws/lambda/<name>" --start-time <epoch-ms> --end-time <epoch-ms> --filter-pattern "<pattern>" --limit 100 > /tmp/logs.json` のように期間と上限を明示する。

AutoSNSFlow – ターミナル/WSL & ログ運用ルール
目的

統合ターミナルやチャットに巨大出力を流して固まる問題を防ぐ

WSL(Ubuntu) 側でコマンドを実行し、出力は原則ファイルに保存する

共通前提

ターミナルは WSL を既定にする

大量ログを画面に直接出さない。表示は要点のみ（末尾/先頭）

JSON/長文は整形してページャ経由で閲覧

生成・提案の基本方針（重要）

重い/長いコマンドは run_bg で提案し、出力は /tmp/*.log に保存すること

例: run_bg lambda_test "./run.sh --verbose"

逐次確認が必要な標準出力は | less -R に流す提案にすること

例: some_cmd |& less -R

JSONは jq -C . | less -R で整形表示を提案すること

保存済みログの閲覧は head -n 200 / tail -n 200 で要点のみ提案すること

チャットにフルログを貼らない。必要時は「保存先パス」を示すのみ

WSLシェル関数（必ず最初に提案）

ユーザーの ~/.bashrc に以下を追記して使う前提で説明・提案すること：

# === WSL helpers ===
run_bg() {  # run_bg <name> "<command>"
  local name="$1"; shift
  local log="/tmp/${name}_$(date +%Y%m%d_%H%M%S).log"
  nohup bash -lc "$* > \"$log\" 2>&1" </dev/null & disown
  local pid=$!
  echo "[started] pid=$pid  log=$log"
  tail -n 200 -f --pid="$pid" "$log"
  echo "[done] full log: $log"
}
head200() { sed -n '1,200p' "$1"; [ "$(wc -l < "$1")" -gt 200 ] && echo "…(truncated; full: $1)"; }
tail200() { tail -n 200 "$1"; }
wrap180() { fold -w 180 -s; }
export LESS='-R -S'  # 色保持＆横スクロール

Cursor 設定（settings.json）もセットで提示

重い出力の再描画を避けるため、以下の設定を自動で提案すること：

{
  "terminal.integrated.defaultProfile.windows": "Ubuntu (WSL)",
  "terminal.integrated.scrollback": 1000,
  "terminal.integrated.gpuAcceleration": "off",
  "terminal.integrated.enablePersistentSessions": false
}

重処理をタスクで走らせる例（tasks.json）

外部WSL経由での実行例を併せて出すこと：

{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Run heavy in WSL",
      "type": "shell",
      "command": "wsl.exe -d Ubuntu bash -lc \"run_bg heavy_job './your-heavy-command --option'\"",
      "options": { "cwd": "${workspaceFolder}" },
      "presentation": { "reveal": "always", "panel": "new", "clear": true },
      "problemMatcher": []
    }
  ]
}

コマンド生成テンプレ（必ずこの型で）

重い処理
run_bg <job> "<実コマンド>"
例）run_bg build "npm run build"

JSON確認
cat <file>.json | jq -C . | less -R

ログ要点
head200 /tmp/<log>.log / tail200 /tmp/<log>.log

長行の可読化
<cmd producing long lines> | wrap180 | less -R

禁則事項

チャットに巨大ログの全文を出力しない

cat <巨大ファイル> をそのまま統合ターミナルに流さない

Windows側バイナリ/NodeとWSL側が混在する提案をしない

このルールに従って、以後CursorはWSL実行＋ログファイル保存＋要点表示を前提にコマンドやスクリプトを提案してください。