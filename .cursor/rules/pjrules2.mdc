---
description:
ブランチ運用（必読）

main：本番。ここへは「明示指示があった時のみ」マージ。直接 push 禁止。

staging：通常の開発・修正・デバッグはここへ。特段の指示が無い場合は staging。

lambda：定期実行（scheduled / auto-post / lambda/scheduled-autosnsflow）関連は必ずここへ push。push で自動ビルド/デプロイが走る。

デザイン指針

Tailwind CSS のみで構成。ライト/ダーク両対応、将来のモバイル（レスポンシブ）前提。

ローダー/モーダル等の共通部品を統一し、画面間の一貫性を確保。

変更時の原則

どのブランチに上げるかを必ず明示。不明点は修正せず確認。

既存ロジックを大きく変える提案は一度確認（互換影響の洗い出しを含む）。

共通部品の変更は呼び出し元全体の動作確認をセット。

定期実行（Lambda）ポリシー

対象語：定期実行/自動投稿/scheduled/auto-post/lambda/scheduled-autosnsflow を含む変更はLambda関連とみなす。

lambda ブランチにコミット/PR。コミットメッセージ・PR タイトルに lambda: を付与。

デプロイ前にローカル or ステージングで確認。main 反映は事前了承があるときのみ。

シークレット取り扱い

APIキー/トークン/個人情報のコミット禁止。.env.* は .gitignore。

デプロイ時は GitHub Secrets / AWS Secrets Manager を使用。

CI に git-secrets / truffleHog を導入し、検出時はブロック。

漏洩時は即ローテート＋履歴除去（git filter-repo 等）＋報告。

コマンド実行ポリシー（ここからが実行制御ルール）

必須環境：WSL(Ubuntu) の bash で実行。Windows PowerShell 直叩き禁止。
原則：1 ステップ = 1 コマンド。ワンライナー連結（&& で多段）禁止。

1) 守護ランナーの使用（Cursor は必ずこれで実行）

cx_run <job> <timeoutSec> "<cmd>" で実行し、タイムアウト・ログ保存・末尾200行のみ表示を徹底。

止まった時は cx_stop <job> を提示して強制停止できる形にする。

ログは /tmp/cursor_guard/<job>_YYYYMMDD_HHMMSS.log。

もし cx_run/cx_stop が未導入なら、最初に導入手順を提示してから作業を進めること。

（参考：導入スニペットは分割して提示すること）

~/.bashrc に関数を追記する旨を告知

追記用コマンドを短い2〜3手順に分けて提示（長大 here-doc 禁止）

source ~/.bashrc を実行

2) Git 操作は非対話＋タイムアウト

Git コマンドは git_to <timeoutSec> <subcommand…> を使用（非対話・pager無効・ログ保存）。

commit は 必ず -m 指定。必要時のみ --no-verify を明示。

壊しやすい操作の前後で git status --porcelain を別ステップで実行して確認。

認証は SSH 鍵前提（BatchMode=yes）。プロンプト待ち禁止。

3) 出力・ログの扱い

長い出力は必ずファイルへ（> /tmp/*.json / /tmp/*.log）。画面は head -n 100 / tail -n 200 の要点のみ。

JSON の確認は jq -C .（色）＋ less -R か、ログファイル参照で行う。

CloudWatch/DynamoDB などの取得は --limit と期間指定を必須にし、無制限取得を禁止。

4) 長い/複雑な処理

長文コマンドや多段 here-doc はスクリプト化して /tmp/*.sh に保存→実行。

逐次確認が必要な場合は cx_run で短いステップに分割し、各段で結果を確認してから次へ。

コマンドは原則 cx2 / run2 / git2 を使う。長時間が必要な場合のみ秒数を明示

5) 例（ワンライナー禁止 → 分割版）

NG

git rm -r --cached A B && git commit -m "chore" && git push origin lambda


OK

git_to 60 rm -r --cached A B || true
git_to 20 status --porcelain
git_to 60 commit -m "chore: remove test artifacts" --no-verify
git_to 120 push --porcelain --no-verify origin lambda


ビルド

cx_run build 1800 "npm ci"
cx_run build 1800 "npm run build"
cx_run lsout 30  "ls -lh .next | tail -n 50"

CLI 出力・ログ取得の詳細

出力は一時ファイルに保存→整形→要点だけ表示。

less 等ページャは基本使わず、ログ参照を案内。

CloudWatch 例：
cx_run logs 60 "aws logs filter-log-events --log-group-name '/aws/lambda/<name>' --start-time <epoch-ms> --end-time <epoch-ms> --limit 100 > /tmp/logs.json"

ローカルデバッグ専用変更

node_modules 直接編集・生成物・一時ログのコミット禁止。必要なら patch-package を利用し patches/ に置く。

デバッグコミットは debug:/wip:。最終 PR 前に整理（squash/rebase）。

CI で node_modules/ や *.log などの混入チェックを実施。

事故復旧（提示テンプレ）

実行が進まない場合：

cx_stop <job>

リポジトリ直下で find .git -name '*.lock' -print -delete

git_to 20 status --porcelain で健全性確認

端末不調時：stty sane → ターミナル再起動。WSL 再起動は wsl.exe --shutdown。

遵守事項（実行時に必ず守る）

WSL で実行し、cx_run / git_to 以外での多段ワンライナー提案は禁止。

すべての重い処理はタイムアウトとログ保存を前提に提示。

ログの保存先パスを毎回明示し、フルログ貼り付けはしない。

ブランチ規約・シークレット規約を破る提案は行わない。
globs:
alwaysApply: true
---

### ログ保存ポリシー（ExecutionLogs / CloudWatch の使い分け）

- **ExecutionLogs (DynamoDB)**: ユーザー単位でダッシュボードに表示する必要がある **ユーザーアクション修正が必要なエラーのみ** を保存する。例: 投稿に失敗した、返信投稿に失敗した、本文生成に失敗した等。これらは `putLog(..., status: 'error')` で保存されるべきである。
- **CloudWatch Logs**: 定期実行・運用ログ・集計ログ・ユーザー未特定のデバッグ情報は CloudWatch に出力する（`console.log`, `console.warn`, `console.error` を使用）。大量ログの保存には CloudWatch を利用し、Insights での集計を前提とする。
- **デバッグ用の一時的テーブル保存**: 一時的にテーブルへ保存したいデバッグログは `persistDebugLog(args)` を使って明示的に保存する。これは運用中に一時的に有効化して結果を追跡するために使う。永続化のオン/オフは `ALLOW_DEBUG_EXEC_LOGS` 環境変数でも制御できる。
- **putLog の振る舞い**:
  - デフォルト: `status === 'error' && userId` の場合にのみ ExecutionLogs に保存。`persist` フラグで強制保存、`ALLOW_DEBUG_EXEC_LOGS` 環境変数でデバッグログを許可可能。
  - `info` / `skip` 等のステータスは基本的に DynamoDB へは保存しない（代わりに CloudWatch に出力）。

### 運用手順

- デバッグ目的で `persistDebugLog` を使用する場合は、使用後に必ず `persistDebugLog` の呼び出し箇所を削除または `persist=false` に戻すこと。
- ExecutionLogs の肥大化を防ぐため、将来的に TTL を導入する（`expiresAt` 属性を追加して自動削除する）。このタスクは TODO に登録済み。

### ワンタイム UI テストの扱い

- ダッシュボード等に追加するテスト用 UI（例: 環境変数表示ボタン）は**一時的**なものとし、テスト終了後は必ず削除すること。
- テスト用ボタンをコミットする場合は PR タイトルに `debug:/wip:` を付与し、マージ前に必ず該当変更を取り除くレビューを行うこと。

（注）このルールに基づき、先ほどのテストボタンと API を削除しました。

