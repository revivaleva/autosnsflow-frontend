## TODO / 進捗管理

- このファイルは現在進行中の作業・TODO・進捗メモを記載します。
- 例: ステージングでのスモークテスト、既存バグ修正、PR 作成など。

### 現在のタスク

- `Fix existing-account copy behavior in SNSAccountModal` — pending
- `Run local build and fix compile errors` — completed
- `Stage smoke tests and lambda deploy` — completed
- `Prevent creating ThreadsAccounts items when marking deletion_error; add conditional update (attribute_exists(PK))` — completed
- `Investigate root cause of deletion_error records: correlate DeletionQueue, ExecutionLogs, ThreadsAccounts entries` — cancelled

- `Deprecate accessToken usage: remove all checks/fallbacks and prefer oauthAccessToken` — pending
 - `Deprecate accessToken usage: remove all checks/fallbacks and prefer oauthAccessToken` — in_progress
 - `Fix ThreadsAccounts token field name/expiry handling (threads-delete)` — completed
   - Description: Correct ProjectionExpression and ensure expiry field `oauthTokenExpiresAt` is referenced; mark for wider grep for similar name mismatches.
 - `Design and implement token auto-refresh worker` — pending
 - `Mark accounts with missing/expired oauthAccessToken as reauth_required and show UI badge` — pending
 - `アカウント編集モーダルに認証状態ラベルと認証解除ボタンを追加` — completed
   - ファイル: `src/app/accounts/SNSAccountModal.tsx`
   - 内容: 認可URLコピーボタン横に認証状態ラベルを追加し、認証解除ボタンを実装。クライアント側から `PATCH /api/threads-accounts` に `oauthAccessToken: ''` を送信して DB 上のトークンを削除する。
 - `モーダル開時に最新のトークン状態をフェッチして表示を正確化` — pending
   - 実装: `SNSAccountModal` の `useEffect` で `/api/threads-accounts?accountId=...` を呼び、`oauthAccessToken` / `accessToken` / `clientSecret` の有無を state に反映する。
 - `サーバー側: トークン削除操作を ExecutionLogs に記録する` — pending
   - 実装: `src/pages/api/threads-accounts.ts` の PATCH ハンドラに `putLog` 相当の呼び出しを追加し、`action: 'deauthorize'` を記録する。
 - `テスト: e2e/統合テストで認証解除フローを検証` — pending
   - シナリオ: モックDBまたはテスト環境でアカウントにトークンをセット→モーダルで解除→PATCH成功→DB上トークンが空であることとUIが未認証に更新されることを確認。
 - `Fix: ensure normal posts use normal prompts, not quote prompts` — pending
   - Description: Investigate and fix code path where normal scheduled posts are generated using the quote-generation prompt. Ensure `generateAndAttachContent` selects prompt based on `type` (quote vs normal) and UserSettings/AppConfig precedence.
 - `Unify ExecutionLogs writes across Next.js APIs` — in_progress
   - Files updated: `src/pages/api/threads/delete-post.ts`, `src/pages/api/fetch-replies.ts`, `src/pages/api/scheduled-posts/index.ts`
   - Remaining: adapt other `src/pages/api/**` files that write ExecutionLogs (e.g. `threads-accounts.ts`, `auto-posts/create-today.ts`, `auto-post-group-items.ts`, etc.)
 - `Standardize lambda ExecutionLogs item shape` — completed
   - File updated: `lambda/scheduled-autosnsflow/src/handler.ts` (normalize fields: action, createdAt, detail length limit, targetId, deletedCount)
 - `Introduce postKey / detailSignature extraction for dashboard aggregation` — pending
   - Purpose: enable grouping by same post while allowing different error details to show separately
 - `Run staging smoke tests for dashboard error dedupe` — pending
   - Verify deduplication and normalizedMessage/detailSignature effectiveness

- `Configure Lambda reserved concurrency for scheduled-autosnsflow (temporary)` — pending
  - 概要: Lambda の予約同時実行を `1` に設定し、every-5min 実行時の二重投稿を一時的に防止する。運用影響（全ユーザーのスループット低下）を理解した上で適用すること。

- `Implement postingLock in runAutoPostForAccount to prevent duplicate external posts` — pending
  - 概要: 投稿前に条件付き UpdateItem で `postingLock` を設定し、ロック取得に成功したワーカーのみが Threads へ投稿する。投稿後はロックを解除することで、Lambda の並列実行があっても同一予約件の二重投稿を防止する。 

### Threads Resolver（username→numericId）タスク

- `Create lambda/threads-resolver scaffold` — in_progress
  - 概要: TypeScript Lambda スキャフォールド（handler, package.json, tsconfig）を作成する。
- `Implement parser: html -> {postCode,numericId,postBody,publishedAt}` — pending
  - 概要: HTML 内の `script[type="application/json"]` を列挙して JSON.parse を試行し、最新投稿を抽出する純粋関数を作成する。ユニットテストを含む。
- `Implement handler: /resolve?username=` — pending
  - 概要: 入力正規化、fetch (mobile UA)+parser 呼び出し、エラーハンドリング、CORS ヘッダ返却。
- `Add Playwright fallback as separate lambda (optional)` — pending
  - 概要: Playwright を使う場合は別 Lambda `threads-resolver-playwright` を用意し、メインから `Invoke` して同期的に処理できるようにする。
- `Add README for threads-resolver (env/usage/iam)` — pending
  - 概要: 環境変数、利用例（定期バッチ/UI）、デプロイ手順を記載する。
- `Add unit tests for parser and handler` — pending
  - 概要: parser の HTML サンプル群と handler の統合テストを作成する。

---

### 一時デバッグ用ソースの掃除

- note: デバッグ用に追加した `src/pages/api/debug/run-pending-quote.ts` や `src/pages/api/debug/run-auto-posts-remigio.ts` のようなエンドポイントは、本番反映前に不要になります。これらはローカル確認用・デバッグ用に追加したソースです。予定としては以下を行ってください:
  - **短期対応**: 機能実装と動作確認が完了したら、不要なデバッグAPIを削除する。 (責任者: 実装者)
  - **期限**: 次回リリース直前のリファクタ作業内で削除する
  - **理由**: デバッグ用エンドポイントはセキュリティリスクとメンテナンスコストを増やすため、本番へは含めない

### テスト向けデバッグの掃除（今回の追加）

- `Remove __TEST_OUTPUT__ pushes or gate them behind __TEST_CAPTURE__ flag` — pending
  - 概要: テスト時にのみ収集する `__TEST_OUTPUT__` への push を無効化または環境フラグでのみ有効化する。Lambda の先頭で noop 化済みだが、各 push を削除またはガードする。 (担当: 実装者)

- `Remove unnecessary console.info/debug logs from lambda handler` — pending
  - 概要: 調査用に追加した多数の `console.info` / `console.warn` を整理し、本番に不要な出力を削除または `ALLOW_DEBUG_EXEC_LOGS` によるガードで制御する。 (担当: 実装者)

（詳細は `.cursor/rules/pjspec.mdc` とソースの TODO コメントを参照）



## 運用上の注意（将来的な最適化）

- 現状、`/api/threads-accounts` の実装では各アカウントについて DynamoDB の `GetItem` / `Query` を個別に実行して `status` を取得するフォールバック処理を採用しています。小規模環境では問題ありませんが、アカウント数やトラフィックが増加するとレイテンシとコストの問題が発生します。
- 将来的には以下のような一括取得・索引を検討して下さい:
  - `DeletionQueue` や `ThreadsAccounts` をまたいだ一括 `Query` を行うための GSI の導入（例: `userId` / `status` をキーとした GSI）。
  - ScheduledPosts 側で `sourcePostId` に対する検索を効率化するための GSI（例: `userId` + `sourcePostId`）の追加を検討する。引用ワーカーの重複チェックを Query ベースで実行できるようになるため、将来的にはGSI導入を推奨します。
  - `ThreadsAccounts` 側で `status` をまとめて返却するバックエンド側の集約処理（backend-core 側の拡張）。
  - `DeletionQueue` の存在チェックを一度のバッチ Query で取得し、フロント向けレスポンスにマージして返す設計。
- 上記の最適化はパフォーマンス向上とコスト削減に寄与します。スケールや運用コストの指標が閾値を超えたら優先的に対応してください。

---

## ルールと実装の差分 / 不足点（要追記・検討）

- 現状の実装は `ScheduledPosts` テーブル上の `status === 'posted'` かつ `isDeleted !== true` を主な削除対象としている。一方でルールでは「API で存在する全ての投稿（ScheduledPosts に登録されていない投稿も含む）を削除する」とあるため、両者のカバレッジにズレがある。
- 即時実行の dry-run（count）は Threads API を参照するが、実削除は DB ベースの抽出を優先しているため、取得件数と実削除対象の不一致が発生しうる。
- Lambda のキュー処理は現在 `Scan` による全テーブル走査で due 項目を検出している。スケール時のパフォーマンスとコスト観点で GSI / Query ベースへの移行が必要。
- エラー時の運用方針がルールと実装で一部食い違う（ルールは「停止して手動対応を期待」するケースがあるが、実装は retry_count を使って再試行可能にしている）。どちらに統一するか決定が必要。

## 追加で必要と考えられる処理・改善案（要検討）

- Threads API にのみ存在する投稿も削除対象とするため、キュー処理または即時削除で Threads API からの取得→削除を行えるようにする（ScheduledPosts との突合せルールを規定）。
- `ExecutionLogs` のスキーマを明確化してログ出力を統一するラッパー関数を導入する（必須フィールド: userId, accountId, action, status, message, deletedCount, errorDetail, initiatedBy, timestamp）。
- 失敗時の挙動を明文化（自動再試行の最大回数・指数バックオフ・最終的に status を `deletion_error` に設定して管理者通知を行う等）。
- DeletionQueue の検索を `Scan` から GSI/Query ベースへ移行。具体的には `userId` 或いは `status` をキーとした GSI の追加を検討する。
- バッチサイズを環境変数または ThreadsAccounts のメタフィールドで可変にし、テスト時や緊急対応時に切り替えられる仕組みを追加する。
- 権限エラー（401/403）や RateLimit に対する明確な制御（通知、アカウント停止、エラーステータス設定）を追加。
- キュー項目に TTL や最大 retry 上限を追加し、長期放置や永久失敗時の自動通知を行う。
- 削除処理の idempotency を改善（同じ投稿に対する重複削除呼び出し時の安全性）。

## ルールに無いが必要と感じる項目（要検討）

- 削除対象の総合定義（ScheduledPosts と Threads API 双方をどのように統合して“全投稿”と見なすか）をルールへ追記する必要。
- IAM ポリシーの最小権限定義を Lambda / 管理 UI / バッチ処理ごとに明確化するドキュメント。
- 操作ログに `initiatedBy`（ユーザーまたはシステムの識別子）を必須化し、監査トレイルを強化すること。
- キュー監視用のアラート（CloudWatch / Slack / Discord）やダッシュボードを整備すること。

---

注: 上記はすべて「要検討」項目です。優先順位と採用方針を決めたあと、具体的な実装タスク（ファイル/コード差分）を作成します。
