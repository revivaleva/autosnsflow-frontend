## TODO / 進捗管理

- このファイルは現在進行中の作業・TODO・進捗メモを記載します。
- 例: ステージングでのスモークテスト、既存バグ修正、PR 作成など。

### 現在のタスク

- `Fix existing-account copy behavior in SNSAccountModal` — pending
- `Run local build and fix compile errors` — completed
- `Stage smoke tests and lambda deploy` — completed
- `Prevent creating ThreadsAccounts items when marking deletion_error; add conditional update (attribute_exists(PK))` — completed
- `Investigate root cause of deletion_error records: correlate DeletionQueue, ExecutionLogs, ThreadsAccounts entries` — cancelled

- `Deprecate accessToken usage: remove all checks/fallbacks and prefer oauthAccessToken` — pending
 - `Deprecate accessToken usage: remove all checks/fallbacks and prefer oauthAccessToken` — in_progress
 - `Design and implement token auto-refresh worker` — pending
 - `Mark accounts with missing/expired oauthAccessToken as reauth_required and show UI badge` — pending

（詳細は `.cursor/rules/pjspec.mdc` とソースの TODO コメントを参照）



## 運用上の注意（将来的な最適化）

- 現状、`/api/threads-accounts` の実装では各アカウントについて DynamoDB の `GetItem` / `Query` を個別に実行して `status` を取得するフォールバック処理を採用しています。小規模環境では問題ありませんが、アカウント数やトラフィックが増加するとレイテンシとコストの問題が発生します。
- 将来的には以下のような一括取得・索引を検討して下さい:
  - `DeletionQueue` や `ThreadsAccounts` をまたいだ一括 `Query` を行うための GSI の導入（例: `userId` / `status` をキーとした GSI）。
  - `ThreadsAccounts` 側で `status` をまとめて返却するバックエンド側の集約処理（backend-core 側の拡張）。
  - `DeletionQueue` の存在チェックを一度のバッチ Query で取得し、フロント向けレスポンスにマージして返す設計。
- 上記の最適化はパフォーマンス向上とコスト削減に寄与します。スケールや運用コストの指標が閾値を超えたら優先的に対応してください。

---

## ルールと実装の差分 / 不足点（要追記・検討）

- 現状の実装は `ScheduledPosts` テーブル上の `status === 'posted'` かつ `isDeleted !== true` を主な削除対象としている。一方でルールでは「API で存在する全ての投稿（ScheduledPosts に登録されていない投稿も含む）を削除する」とあるため、両者のカバレッジにズレがある。
- 即時実行の dry-run（count）は Threads API を参照するが、実削除は DB ベースの抽出を優先しているため、取得件数と実削除対象の不一致が発生しうる。
- Lambda のキュー処理は現在 `Scan` による全テーブル走査で due 項目を検出している。スケール時のパフォーマンスとコスト観点で GSI / Query ベースへの移行が必要。
- エラー時の運用方針がルールと実装で一部食い違う（ルールは「停止して手動対応を期待」するケースがあるが、実装は retry_count を使って再試行可能にしている）。どちらに統一するか決定が必要。

## 追加で必要と考えられる処理・改善案（要検討）

- Threads API にのみ存在する投稿も削除対象とするため、キュー処理または即時削除で Threads API からの取得→削除を行えるようにする（ScheduledPosts との突合せルールを規定）。
- `ExecutionLogs` のスキーマを明確化してログ出力を統一するラッパー関数を導入する（必須フィールド: userId, accountId, action, status, message, deletedCount, errorDetail, initiatedBy, timestamp）。
- 失敗時の挙動を明文化（自動再試行の最大回数・指数バックオフ・最終的に status を `deletion_error` に設定して管理者通知を行う等）。
- DeletionQueue の検索を `Scan` から GSI/Query ベースへ移行。具体的には `userId` 或いは `status` をキーとした GSI の追加を検討する。
- バッチサイズを環境変数または ThreadsAccounts のメタフィールドで可変にし、テスト時や緊急対応時に切り替えられる仕組みを追加する。
- 権限エラー（401/403）や RateLimit に対する明確な制御（通知、アカウント停止、エラーステータス設定）を追加。
- キュー項目に TTL や最大 retry 上限を追加し、長期放置や永久失敗時の自動通知を行う。
- 削除処理の idempotency を改善（同じ投稿に対する重複削除呼び出し時の安全性）。

## ルールに無いが必要と感じる項目（要検討）

- 削除対象の総合定義（ScheduledPosts と Threads API 双方をどのように統合して“全投稿”と見なすか）をルールへ追記する必要。
- IAM ポリシーの最小権限定義を Lambda / 管理 UI / バッチ処理ごとに明確化するドキュメント。
- 操作ログに `initiatedBy`（ユーザーまたはシステムの識別子）を必須化し、監査トレイルを強化すること。
- キュー監視用のアラート（CloudWatch / Slack / Discord）やダッシュボードを整備すること。

---

注: 上記はすべて「要検討」項目です。優先順位と採用方針を決めたあと、具体的な実装タスク（ファイル/コード差分）を作成します。
