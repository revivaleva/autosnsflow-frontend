# pjspec: 自動投稿の選択と再試行仕様

この仕様書は、定期実行（every-5min）における予約投稿の選択・投稿・再試行の挙動を定義する。現在実装中（development）であり、リリース前にレビューとテストが必要。

## 目的
- 引用投稿が引用元の削除等で失敗して投稿処理が停止する事象を防ぐ
- 前回失敗した古い引用投稿よりも、新しい引用投稿を優先して投稿する
- 引用・通常投稿それぞれ1件ずつを同一5分実行内で最大1回ずつ投稿する
- 投稿処理でエラーが発生しても次の候補への処理を継続する
- 投稿に失敗した予約はメタデータを記録し、UIで失敗が視認できるようにする

## 主要ルール
1. 1アカウント当たりの投稿回数
   - every-5min の `runAutoPostForAccount` は、1回の実行で最大で「引用投稿 1 件」＋「通常投稿 1 件」を試行する（合計最大2件）。

2. 候補選出
   - GSI から候補を取得後、候補をタイプ別（quote / normal）に分離し、それぞれ古い順にソートして処理する。
   - ただし、`postAttempts` がある候補は優先度を下げ、まず `postAttempts === 0` のものを試行する。

3. 再試行と失敗メタ
   - 投稿失敗時に、該当予約レコードへ `postAttempts`（数値）をインクリメントし、`lastPostError`（短いエラーメッセージ）、`lastPostAttemptAt`（unix秒）を保存する。
   - 明らかに永久的なエラー（例: 引用元が削除されていると判定できる場合）は `permanentFailure=true` を付与し、次回以降はスキップされる。
   - `postAttempts >= 3` の場合は優先度を大幅に下げる（デフォルトでスキップ候補）。

4. エラー耐性
   - 各候補の投稿処理は個別に try/catch し、失敗はその候補のメタへ記録して処理を継続する。アカウント全体のループは続行する。

5. UI 表示
   - `ScheduledPostsTable` は `postAttempts > 0` や `lastPostError` がある予約行を強調表示（背景色変更）する。

## 開発中の注記
- 現在の実装ブランチ: `lambda`（ローカルで確認済み）
- 影響が大きい箇所のため、採用前に以下を実施する:
  - 単体テスト/統合テスト
  - DynamoDB の既存データに対する互換性確認
  - デプロイ前の Canary 実行

## TODO（実装タスク）
- T001 - T009 を参照（`pjtodo.mdc` に記載）

- PRUNE: daily-prune の全表 Scan→削除への変更（dry-run フラグ付き、DeletionQueue 中アカウントを除外）
- PRUNE: UsageCounters を updatedAt で全表削除（BatchWriteItem を使用）
- PRUNE: Discord 通知を各テーブル毎の削除件数/全件数表示へ変更（実行時間含む）

## 関連ファイル
- `lambda/scheduled-autosnsflow/src/handler.ts`
- `src/app/scheduled-posts/ScheduledPostsTable.tsx`


(作成日: development)

## 管理画面（Admin Users）仕様

### 目的
- サービス管理者がユーザー単位で利用制限や表示名を管理できるようにする。
- 不正利用や運用上の設定変更を容易に行える管理UIを提供する。

### 主な機能
1. **認可**: 既存の Cognito の管理者グループ（`env.ADMIN_GROUP`, デフォルト `Admins`）のメンバーのみアクセス可能。
2. **ユーザー一覧表示**: 各ユーザーの以下情報を一覧で表示する。
   - email
   - userId (Cognito sub)
   - username (管理用表示名、管理画面のみで保存・編集)
   - planType
   - apiUsedCount / apiDailyLimit
   - maxThreadsAccounts（ユーザーが登録できる Threads アカウント数、デフォルト 0）
   - autoPost, autoPostAdminStop
   - updatedAt
3. **編集モーダル**: 各ユーザーの `username`、`apiDailyLimit`、`maxThreadsAccounts`、`autoPost`、`autoPostAdminStop` を編集し保存できる。
4. **コピー可能な userId 表示**: ログイン後のメニューバー下に userId を表示し、クリックでクリップボードへコピーできる。

### データ設計（UserSettings テーブル）
- 既存の `UserSettings` レコードに以下フィールドを追加:
  - `username`: S (デフォルト: "")
  - `maxThreadsAccounts`: N (デフォルト: "0")

### API 仕様
- `GET /api/admin/users` : Cognito からユーザー一覧を取得し、DynamoDB の UserSettings を結合して返却。
- `PATCH /api/admin/users` : 管理者権限で `username`, `apiDailyLimit`, `maxThreadsAccounts`, `autoPost`, `autoPostAdminStop` を更新。

### セキュリティ/運用
- 管理APIは必ず `verifyUserFromRequest` を経由して `assertAdmin` を実行すること。
- 管理操作の監査ログは現時点では不要（将来の拡張で DynamoDB に記録可能）。

### リスクと対応
- DynamoDB の既存レコードにフィールドがない場合は GET 時に初期化（デフォルト値挿入）して互換性を保つ。
